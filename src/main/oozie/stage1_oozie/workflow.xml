<workflow-app name="${jobName}" xmlns="uri:oozie:workflow:0.4">
	<!-- We are looking for a CONTROL.TXT file in their ../raw directory -->
	<parameters>
		<property>
			<name>releaseLabel</name>
		</property>
		<property>
			<name>tableDefFile</name>
		</property>
		<property>
			<name>nameNode</name>
		</property>
		<property>
			<name>jobTracker</name>
		</property>
		<property>
			<name>jobName</name>
		</property>
		<property>
			<name>sourceName</name>
		</property>
		<property>
			<name>toEmailAddress</name>
		</property>
		<property>
			<name>coordTimeInterval</name>
		</property>
		<property>
			<name>tdStageDB</name>
		</property>
		<property>
			<name>tdAuditDB</name>
		</property>
		<property>
			<name>tdServer</name>
		</property>
		<property>
			<name>tdBase</name>
		</property>
		<property>
			<name>tdUser</name>
		</property>
		<property>
			<name>tdPswd</name>
		</property>
		<property>
			<name>tdUserID</name>
		</property>
		<property>
			<name>tdUserIDPassword</name>
		</property>
		<property>
			<name>stageOneDataPartition</name>
		</property>
		<property>
			<name>stageOneFinishedDir</name>
		</property>
		<property>
			<name>stageOneExtractedDir</name>
		</property>
		<property>
			<name>stageOneOozieDir</name>
		</property>
		<property>
			<name>stageOneRawDir</name>
		</property>
		<property>
			<name>stageOnePracticeMappingFile</name>
		</property>
		<property>
			<name>stageOneDivisionMappingFile</name>
		</property>
		<property>
			<name>scriptsDir</name>
		</property>
		<property>
			<name>sqoopConfDir</name>
		</property>
		<property>
			<name>jobFile</name>
		</property>
		<property>
			<name>controlFile</name>
		</property>
		<property>
			<name>workingFile</name>
		</property>
		<property>
			<name>stageThreeControlFile</name>
		</property>
		<property>
			<name>failureFile</name>
		</property>
		<property>
			<name>sourcePath</name>
		</property>
		<property>
			<name>entity</name>
		</property>
		<property>
			<name>outputPath</name>
		</property>
	</parameters>

	<start to="check-working-file" />
	<!-- We are looking for a WORKING.TXT file in their ../raw directory -->
	<!-- If its there then goto END as we must already be working -->
	<!-- If its not being by looking for the CONTROL.TXT file -->
	<decision name="check-working-file">
		<switch>
			<case to="end">
				${fs:exists(workingFile)}
			</case>
			<default to="check-control-file" />
		</switch>
	</decision>
	<!-- We are looking for a CONTROL.TXT file in their ../raw directory -->
	<!-- if we see it we beigin kicking off data ingestion workflows satge-1 -->
	<!-- if we DO NOT see it, we look for a _FAILURE file telling us to clean 
		up the dir so they can reattempt in 30 minutes -->
	<decision name="check-control-file">
		<switch>
			<case to="prep-request">
				${fs:exists(controlFile)}
			</case>
			<default to="check-failure-file" />
		</switch>
	</decision>
	<!-- We are looking for a _FAILURE file in their ../raw directory -->
	<!-- if we see it we begin deleting all files in the raw directory stage-1 -->
	<!-- if we DO NOT see it, we just egd -->
	<decision name="check-failure-file">
		<switch>
			<case to="clean-up-request">
				${fs:exists(failureFile)}
			</case>
			<default to="end" />
		</switch>
	</decision>
	<!-- We found a _FAILURE FILE -->
	<!-- We have been requested to clean up all the files in the raw directory 
		stage-1 -->
	<action name="clean-up-request">
		<fs>
			<delete path="${stageOneRawDir}" />
			<mkdir path='${stageOneRawDir}' />
			<chmod path='${stageOneRawDir}' permissions='777' dir-files='false' />
		</fs>
		<!-- We end normally because we succeeded in simply cleaning up -->
		<ok to="end" />
		<error to="end" />
	</action>

	<!-- We have been requested to go to work so move the CONTROL.TXT file to 
		WORKING.TXT -->
	<!-- This will ensure if we fire up again while working the second fire-up 
		will -->
	<!-- simply exit inormally. -->
	<!-- Do any other clean from previous job you need done here NOW -->
	<action name="prep-request">
		<fs>
			<!-- GARY CLEANS FOR TODAYS WORK .... -->
			<move source="${controlFile}" target="${workingFile}" />
			<chmod path='${stageOneRawDir}/*' permissions='777' dir-files='false' />
		</fs>
		<!-- Even if this step is not needed, and it may not be, move to next step -->
		<ok to="retrieveControlJob" />
		<error to="retrieveControlJob" />
	</action>

	<!-- We call say control job python script in order to retrieve the job 
		id -->
	<action name="retrieveControlJob">
		<shell xmlns="uri:oozie:shell-action:0.1">
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<exec>/usr/bin/python</exec>
			<argument>chsSayControlJob.py</argument>
			<argument>-i</argument>
			<argument>${workingFile}</argument>
			<file>${scriptsDir}/chsSayControlJob.py#chsSayControlJob.py</file>
			<file>${scriptsDir}/chsHadoopUtils.py#chsHadoopUtils.py</file>
			<file>${scriptsDir}/simpleflake.py#simpleflake.py</file>
			<capture-output />
		</shell>
		<ok to="validateControlPayload" />
		<error to="stage-1-notify-job-failed" />
	</action>

	<!-- We verify the job id was properly grabbed -->
	<decision name="validateControlPayload">
		<switch>
			<case to="retrieveControlDate">
				${
				wf:actionData('retrieveControlJob') ['returnCode'] ne
				'FAILURE'
				}
			</case>
			<default to="stage-1-notify-control-failed" />
		</switch>
	</decision>

	<!-- We call say control extract from date python script in order to retrieve 
		the date for run -->
	<action name="retrieveControlDate">
		<shell xmlns="uri:oozie:shell-action:0.1">
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<exec>/usr/bin/python</exec>
			<argument>sayControlExtractFromDate.py</argument>
			<argument>-f</argument>
			<argument>${workingFile}</argument>
			<file>${scriptsDir}/sayControlExtractFromDate.py#sayControlExtractFromDate.py</file>
			<file>${scriptsDir}/chsHadoopUtils.py#chsHadoopUtils.py</file>
			<file>${scriptsDir}/simpleflake.py#simpleflake.py</file>
			<capture-output />
		</shell>
		<ok to="validateControlDatePayload" />
		<error to="stage-1-notify-job-failed" />
	</action>

	<!-- We verify the date was properly grabbed -->
	<decision name="validateControlDatePayload">
		<switch>
			<case to="stage-1-pre-cleanup">
				${wf:actionData('retrieveControlDate') ['returnCode']
				ne 'FAILURE'}
			</case>
			<default to="stage-1-notify-control-failed" />
		</switch>
	</decision>

	<action name="stage-1-pre-cleanup">
		<fs>
			<delete path="${outputPath}" />
			<mkdir path="${outputPath}"/> 
			<chmod path='${outputPath}' permissions='755' dir-files='false'/>
			<!--Do any other clean up here -->
			<!--<delete path="${errorDataDir}"/> <mkdir path="${errorDataDir}"/> <chmod 
				path='${errorDataDir}' permissions='755' dir-files='false'/> -->
		</fs>
		<ok to="stage-1-notify-status-started" />
		<error to="stage-1-notify-status-started" />
	</action>	

	<!-- we have failed so tell the scorecard and exit -->
	<action name="stage-1-notify-job-failed">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraStatusPush</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>-j</arg>
			<!-- we probably do not even have a job id at this point -->
			<arg>unknown</arg>
			<arg>-f</arg>
			<arg>0000</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>STAGE-1</arg>
			<arg>-x</arg>
			<arg>FAILED</arg>
			<arg>-m</arg>
			<arg>'${wf:id()} Stage-1 control job checks failed workflow exiting
				...'</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="stage-1-early-failure-cleanup" />
		<error to="stage-1-early-failure-cleanup" />
	</action>

	<action name="stage-1-notify-control-failed">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraStatusPush</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>-j</arg>
			<!-- we probably do not even have a job id at this point -->
			<arg>unknown</arg>
			<arg>-f</arg>
			<arg>0000</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>STAGE-1</arg>
			<arg>-x</arg>
			<arg>FAILED</arg>
			<arg>-m</arg>
			<arg>'${wf:id()} Stage-1 control file checks failed workflow exiting
				...'</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="stage-1-early-failure-cleanup" />
		<error to="stage-1-early-failure-cleanup" />
	</action>

	<!-- we have have everything we need to go, notity the SCoreCard we are 
		now running -->
	<action name="stage-1-notify-status-started">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraStatusPush</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>-j</arg>
			<arg>${wf:actionData('retrieveControlJob')['jobID']}</arg>
			<arg>-f</arg>
			<arg>0000</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>STAGE-1</arg>
			<arg>-x</arg>
			<arg>STARTED</arg>
			<arg>-m</arg>
			<arg>'${wf:id()} Stage-1 workflow started now moving to part-1'</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="process-stage-0-files" />
		<error to="process-stage-0-files" />
	</action>

	<!-- use Athena1ETL.jar to process stage 0 files -->
	<action name='process-stage-0-files'>
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<configuration>
				<property>
					<name>mapred.queue.name</name>
					<value>default</value>
				</property>
			</configuration>
			<main-class>com.chs.drivers.Starter</main-class>
			<arg>${sourcePath}</arg>
			<arg>${entity}</arg>
			<arg>${wf:actionData('retrieveControlDate')['returnCode']}</arg>
			<arg>${outputPath}</arg>
			<arg>${stageOnePracticeMappingFile}</arg>
			<arg>${stageOneEntityMappingFile}</arg>
			<arg>${stageOneDivisionMappingFile}</arg>
			<arg>${tdServer}</arg>
			<arg>${tdUserID}</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>${tdStageDB}</arg>
			<arg>divisional</arg>
			<arg>standard</arg>
		</java>
		<!--<ok to="end"/> <error to="kill"/> -->
		<ok to="validate-process-stage-0-files-success" />
		<error to="validate-process-stage-0-files-success" />
	</action>

	<!-- If the jar to process stage 0 files was a success it WILL NOT have 
		returned a string like -->
	<!-- returnCode=FAILURE so we test for it here before moving on, else cleanly 
		exit -->
	<decision name="validate-process-stage-0-files-success">
		<switch>
			<case to="stage-1-notify-part-1-success">
				${
				wf:actionData('process-stage-0-files') ['returnCode']
				ne 'FAILURE'
				}
			</case>
			<default to="stage-1-notify-part-1-failed" />
		</switch>
	</decision>

	<action name="stage-1-notify-part-1-success">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraStatusPush</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>-j</arg>
			<arg>${wf:actionData('retrieveControlJob')['jobID']}</arg>
			<arg>-f</arg>
			<arg>0000</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>STAGE-1</arg>
			<arg>-x</arg>
			<arg>STAGE-1-COMPLETE</arg>
			<arg>-m</arg>
			<arg>'${wf:id()} part 1 success moving to cleanup'</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="stage-1-success-cleanup" />
		<error to="stage-1-success-cleanup" />
	</action>

	<action name="stage-1-success-cleanup">
		<fs>
			<move source="${workingFile}" target="${stageThreeControlFile}" />
			<chmod path='${stageOneFinishedDir}/*' permissions='777' dir-files='false' />
			<!--<delete path="${workingFile}" />-->
			<!--Do any other clean up here -->
			<!--<delete path="${errorDataDir}"/> <mkdir path="${errorDataDir}"/> <chmod 
				path='${errorDataDir}' permissions='755' dir-files='false'/> -->
		</fs>
		<ok to="end" />
		<error to="end" />
	</action>

	<action name="stage-1-notify-part-1-failed">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraStatusPush</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>-j</arg>
			<arg>${wf:actionData('retrieveControlJob')['jobID']}</arg>
			<arg>-f</arg>
			<arg>0000</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>STAGE-1</arg>
			<arg>-x</arg>
			<arg>FAILING</arg>
			<arg>-m</arg>
			<arg>'${wf:id()} failed on part one with [ ${
				wf:actionData('process-stage-0-files') ['returnCode']} ] exiting
				...'
			</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="stage-1-notify-early-failed" />
		<error to="stage-1-notify-early-failed" />
	</action>

	<!--Send status via email -->
	<action name="email-failure">
		<email xmlns="uri:oozie:email-action:0.1">
			<to>${toEmailAddress}</to>
			<subject>Status of workflow ${wf:id()}</subject>
			<body>The workflow ${wf:name()} with id -${wf:id()}, had issues and
				will be kill; The error logged is:
				${wf:errorMessage(wf:lastErrorNode()); }
			</body>
		</email>
		<ok to="stage-1-notify-early-failed" />
		<error to="stage-1-notify-early-failed" />
	</action>

	<action name="email-success">
		<email xmlns="uri:oozie:email-action:0.1">
			<to>${toEmailAddress}</to>
			<subject>Status of workflow ${wf:id()}</subject>
			<body>The workflow ${wf:name()} with id -${wf:id()}, completed
				successfully.
			</body>
		</email>
		<ok to="end" />
		<error to="end" />
	</action>

	<action name="stage-1-notify-early-failed">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraStatusPush</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>-j</arg>
			<arg>${wf:actionData('retrieveControlJob')['jobID']}</arg>
			<arg>-f</arg>
			<arg>${divisionID}</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>STAGE-1</arg>
			<arg>-x</arg>
			<arg>FAILED</arg>
			<arg>-m</arg>
			<arg>'${wf:id()} workflow exiting ....'</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="stage-1-early-failure-cleanup" />
		<error to="stage-1-early-failure-cleanup" />
	</action>

	<!-- We have somehow failed early in the process, remove our WORKING.TXT 
		file -->
	<action name="stage-1-early-failure-cleanup">
		<fs>
			<delete path="${workingFile}" />
			<!--Do any other clean up here -->
			<!--<delete path="${errorDataDir}"/> <mkdir path="${errorDataDir}"/> <chmod 
				path='${errorDataDir}' permissions='755' dir-files='false'/> -->
		</fs>
		<ok to="kill" />
		<error to="kill" />
	</action>

	<!-- End the workflows as having failed -->
	<kill name="kill">
		<message>"Killed job due to error:
			${wf:errorMessage(wf:lastErrorNode())}"
		</message>
	</kill>

	<end name="end" />

</workflow-app> 
