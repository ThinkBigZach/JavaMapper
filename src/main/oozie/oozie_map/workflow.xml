<workflow-app name="${jobName}" xmlns="uri:oozie:workflow:0.4">
	<parameters>
		<property>
			<name>releaseLabel</name>
		</property>
		<property>
			<name>tableDefFile</name>
		</property>
		<property>
			<name>nameNode</name>
		</property>
		<property>
			<name>jobTracker</name>
		</property>
		<property>
			<name>jobName</name>
		</property>
		<property>
			<name>sourceName</name>
		</property>
		<property>
			<name>entity</name>
		</property>
		<property>
			<name>toEmailAddress</name>
		</property>
		<property>
			<name>coordTimeInterval</name>
		</property>
		<property>
			<name>tdStageDB</name>
		</property>
		<property>
			<name>tdAuditDB</name>
		</property>
		<property>
			<name>tdServer</name>
		</property>
		<property>
			<name>tdBase</name>
		</property>
		<property>
			<name>tdUser</name>
		</property>
		<property>
			<name>tdPswd</name>
		</property>
		<property>
			<name>tdUserID</name>
		</property>
		<property>
			<name>tdUserIDPassword</name>
		</property>
		<property>
			<name>customMapDataPartition</name>
		</property>
		<property>
			<name>customMapOozieDir</name>
		</property>
		<property>
			<name>customMapRawDir</name>
		</property>
		<property>
			<name>customMapFinishedDir</name>
		</property>
		<property>
			<name>customMapFinishedDirShort</name>
		</property>
		<property>
			<name>scriptsDir</name>
		</property>
		<property>
			<name>sqoopConfDir</name>
		</property>
		<property>
			<name>jobFile</name>
		</property>
		<property>
			<name>controlFile</name>
		</property>
		<property>
			<name>workingFile</name>
		</property>
		<property>
			<name>failureFile</name>
		</property>
	</parameters>

	<start to="check-working-file" />

	<!-- Looking for WORKING.TXT -->
	<!-- END iff WORKING.TXT exists -->
	<decision name="check-working-file">
		<switch>
			<case to="end">
				${fs:exists(workingFile)}
			</case>
			<default to="check-control-file" />
		</switch>
	</decision>

	<!-- Looking for control file -->
	<!-- END iff CONTROL.TXT is NOT found -->
	<decision name="check-control-file">
		<switch>
			<case to="control-file-prep">
				${fs:exists(controlFile)}
			</case>
			<default to="check-failure-file" />
		</switch>
	</decision>

	<!-- Looking for FAILURE files-->
	<!-- END iff FAILURE files exist -->
	<decision name="check-failure-file">
		<switch>
			<case to="failure-cleanup-request">
				${fs:exists(failureFile)}
			</case>
			<default to="end" />
		</switch>
	</decision>

	<!-- Called when failed check/prepping files -->
	<!-- Deletes then remakes and chmods the raw dir -->
	<action name="failure-cleanup-request">
		<fs>
			<delete path="${customMapRawDir}" />
			<mkdir path="${customMapRawDir}" />
			<chmod path="${customMapRawDir}" permissions='777' dir-files='false' />
		</fs>
		<ok to="end" />
		<error to="end" />
	</action>

	<!-- Renames control to working, then starts process -->
	<action name="control-file-prep">
		<fs>
			<move source="${controlFile}" target="${workingFile}" />
			<chmod path="${customMapRawDir}/*" permissions="777" dir-files="false" />
		</fs>
		<ok to="retrieveControlJob"/>
		<error to="retrieveControlJob"/>
	</action>

	<!-- Calls python script to get jobIDs -->
	<action name="retrieveControlJob">
		<shell xmlns="uri:oozie:shell-action:0.1">
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<exec>/usr/bin/python</exec>
			<argument>chsSayControlJob.py</argument>
			<argument>-i</argument>
			<argument>${workingFile}</argument>
			<file>${scriptsDir}/chsSayControlJob.py#chsSayControlJob.py</file>
			<file>${scriptsDir}/chsHadoopUtils.py#chsHadoopUtils.py</file>
			<file>${scriptsDir}/simpleflake.py#simpleflake.py</file>
			<capture-output />
		</shell>
		<ok to="retrieveSourcePath" />
		<error to="notify-custom-map-control-failed" />
	</action>

	<!-- validates the JobID retrieved by retrieveControlJob -->
	<decision name="validate-control-payload">
		<switch>
			<case to="notify-custom-map-starting">
				${wf:actionData('retrieveControlJob')['jobID'] ne 'FAILURE'
				and wf:actionData('retrieveSourcePath')['controlPath'] ne 'FAILURE'
				and wf:actionData('retrieveFacilityID')['returnCode'] ne 'FAILURE'}
			</case>
			<default to="notify-custom-map-control-failed" />
		</switch>
	</decision>

	<!-- calls a python script to get the source path from the control file -->
	<action name="retrieveSourcePath">
		<shell xmlns="uri:oozie:shell-action:0.1">
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<exec>/usr/bin/python</exec>
			<argument>chsSayControlPath.py</argument>
			<argument>-i</argument>
			<argument>${workingFile}</argument>
			<file>${scriptsDir}/chsSayControlPath.py#chsSayControlPath.py</file>
			<file>${scriptsDir}/chsHadoopUtils.py#chsHadoopUtils.py</file>
			<file>${scriptsDir}/simpleflake.py#simpleflake.py</file>
			<capture-output />
		</shell>
		<ok to="retrieveFacilityID" />
		<error to="notify-custom-map-source-failed" />
	</action>

	<action name="retrieveFacilityID"/>
		<shell xmlns="uri:oozie:shell-action:0.1">
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<exec>/usr/bin/python</exec>
			<argument>chsSayControlFacility.py</argument>
			<argument>-f</argument>
			<argument>${workingFile}</argument>
			<file>${scriptsDir}/chsSayControlFacility.py#chsSayControlFacility.py</file>
			<file>${scriptsDir}/chsHadoopUtils.py#chsHadoopUtils.py</file>
			<file>${scriptsDir}/simpleflake.py#simpleflake.py</file>
			<capture-output />
		</shell>
		<ok to="validate-control-payload" />
		<error to="notify-custom-map-source-failed" />
	</action>

	<!-- Source extraction from control file failed, notifying server -->
	<action name="notify-custom-map-source-failed">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraStatusPush</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>-j</arg>
			<!-- probably no jobID if we're here -->
			<arg>unknown</arg>
			<arg>-f</arg>
			<arg>${wf:actionData('retrieveFacilityID')['returnCode']}</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>STAGE-3</arg>
			<arg>-x</arg>
			<arg>FAILED</arg>
			<arg>-m</arg>
			<arg>'${wf:id()} Custom Map source path/facility ID extraction failed; workflow exiting...'</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="custom-map-failure-cleanup" />
		<error to="custom-map-failure-cleanup" />
	</action>

	<!-- JobID extraction/validation from control file failed, notifying server -->
	<action name="notify-custom-map-control-failed">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraStatusPush</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>-j</arg>
			<!-- probably no jobID if we're here -->
			<arg>unknown</arg>
			<arg>-f</arg>
			<arg>${wf:actionData('retrieveFacilityID')['returnCode']}</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>STAGE-3</arg>
			<arg>-x</arg>
			<arg>FAILED</arg>
			<arg>-m</arg>
			<arg>'${wf:id()} Custom Map control checks failed; workflow exiting...'</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="custom-map-failure-cleanup" />
		<error to="custom-map-failure-cleanup" />
	</action>

	<!-- Deletes working file and kills workflow -->
	<action name="custom-map-failure-cleanup">
		<fs>
			<delete path="${workingFile}" />
		</fs>
		<ok to="kill" />
		<error to="kill" />
	</action>

	<!-- Action to alert that Stage 3 is starting -->
	<action name="notify-custom-map-starting">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraStatusPush</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>-j</arg>
			<arg>${wf:actionData('retrieveControlJob')['jobID']}</arg>
			<arg>-f</arg>
			<arg>${wf:actionData('retrieveFacilityID')['returnCode']}</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>STAGE-3</arg>
			<arg>-x</arg>
			<arg>STARTED</arg>
			<arg>-m</arg>
			<arg>'${wf:id()} CustomMap workflow STARTED'</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="custom-map-process-init" />
		<error to="end" />
	</action>

	<!-- Calls script athena_cm_load.sh, initiating the main workload -->
	<action name="custom-map-process-init">
		<shell xmlns="uri:oozie:shell-action:0.1">
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<exec>/usr/bin/bash</exec>
			<argument>athena_cm_load.sh</argument>
			<argument>${wf:actionData('retrieveControlJob')['jobID']}</argument>
			<argument>${wf:actionData('retrieveSourcePath')['controlPath']}</argument>
			<argument>${customMapFinishedDirShort}</argument>
			<argument>${tdServer}</argument>
			<argument>${tdUserID}</argument>
			<argument>${tdUserIDPassword}</argument>
			<argument>${tdBase}</argument>
			<file>${scriptsDir}/athena_cm_load.sh#athena_cm_load.sh</file>
			<file>${scriptsDir}/athena_cm_load_run.sh#athena_cm_load_run.sh</file>
			<capture-output />
		</shell>
		<ok to="validate-success" />
		<error to="notify-process-failed" />
	</action>

	<!-- validate the output of the main workload (custom-map-process-init) -->
	<decision name="validate-success">
		<switch>
			<case to="notify-process-success">
				${wf:actionData('custom-map-process-init')['returnCode'] ne 'FAILURE'}
			</case>
			<default to="notify-process-failed" />
		</switch>
	</decision>

	<!-- Updates the server that the main workload failed -->
	<action name="notify-process-failed">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraStatusPush</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>-j</arg>
			<arg>${wf:actionData('retrieveControlJob')['jobID']}</arg>
			<arg>-f</arg>
			<arg>${wf:actionData('retrieveFacilityID')['returnCode']}</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>STAGE-3</arg>
			<arg>-x</arg>
			<arg>FAILING</arg>
			<arg>-m</arg>
			<arg>'${wf:id()} CustomMap failed on custom-map-process-init'</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="custom-map-notify-failed" />
		<error to="custom-map-notify-failed" />
	</action>

	<!-- Updates the server that the main workload succeeded -->
	<action name="notify-process-success">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraStatusPush</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>-j</arg>
			<arg>${wf:actionData('retrieveControlJob')['jobID']}</arg>
			<arg>-f</arg>
			<arg>${wf:actionData('retrieveFacilityID')['returnCode']}</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>STAGE-3</arg>
			<arg>-x</arg>
			<arg>WORKING</arg>
			<arg>-m</arg>
			<arg>'${wf:id()} Custom Map success on custom-map-process-init'</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="custom-map-process-notify-success" />
		<error to="custom-map-process-notify-success" />
	</action>

	<!-- Notify the server that the process has completed -->
	<action name="custom-map-process-notify-success">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraWorkQue</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword</arg>
			<arg>-j</arg>
			<arg>${wf:actionData('retrieveControlJob')['jobID']}</arg>
			<arg>-f</arg>
			<arg>${wf:actionData('retrieveFacilityID')['returnCode']}</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>noop</arg>
			<arg>-x</arg>
			<arg>CUSTOM_MAP_COMPLETE</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="successful-process-cleanup" />
		<error to="successful-process-cleanup" />
	</action>

	<!-- Clears the working file -->
	<action name="successful-process-cleanup">
		<fs>
			<delete path="${workingFile}" />
		</fs>
		<ok to="end" />
		<error to="end" />
	</action>

	<!-- Notify the server that the process failed -->
	<action name="custom-map-notify-failed">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraStatusPush</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>-j</arg>
			<arg>${wf:actionData('retrieveControlJob')['jobID']}</arg>
			<arg>-f</arg>
			<arg>${wf:actionData('retrieveFacilityID')['returnCode']}</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>STAGE-3</arg>
			<arg>-x</arg>
			<arg>WORKING</arg>
			<arg>-m</arg>
			<arg>'${wf:id()} Custom Map workflow exiting...'</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="custom-map-failure-cleanup" />
		<error to="custom-map-failure-cleanup" />
	</action>

	<!-- Kills the workflow and leaves a message of what happened -->
	<kill name="kill">
		<message>"An error has killed the job: ${wf:errorMessage(wf:lastErrorNode())}"</message>
	</kill>

	<end name="end" />
</workflow-app>
