<workflow-app name="${jobName}" xmlns="uri:oozie:workflow:0.4">
	<parameters>
		<property>
			<name>releaseLabel</name>
		</property>
		<property>
			<name>tableDefFile</name>
		</property>
		<property>
			<name>nameNode</name>
		</property>
		<property>
			<name>jobTracker</name>
		</property>
		<property>
			<name>jobName</name>
		</property>
		<property>
			<name>sourceName</name>
		</property>
		<property>
			<name>toEmailAddress</name>
		</property>
		<property>
			<name>coordTimeInterval</name>
		</property>
		<property>
			<name>tdStageDB</name>
		</property>
		<property>
			<name>tdAuditDB</name>
		</property>
		<property>
			<name>tdServer</name>
		</property>
		<property>
			<name>tdBase</name>
		</property>
		<property>
			<name>tdUser</name>
		</property>
		<property>
			<name>tdPswd</name>
		</property>
		<property>
			<name>tdUserID</name>
		</property>
		<property>
			<name>tdUserIDPassword</name>
		</property>
		<property>
			<name>customMapDataPartition</name>
		</property>
		<property>
			<name>customMapOozieDir</name>
		</property>
		<property>
			<name>customMapRawDir</name>
		</property>
		<property>
			<name>scriptsDir</name>
		</property>
		<property>
			<name>sqoopConfDir</name>
		</property>
		<property>
			<name>jobFile</name>
		</property>
		<property>
			<name>controlFile</name>
		</property>
		<property>
			<name>workingFile</name>
		</property>
		<property>
			<name>failureFile</name>
		</property>
	</parameters>

	<start to="check-working-file" />

	<!-- Looking for WORKING.TXT -->
	<!-- END iff WORKING.TXT exists -->
	<decision name="check-working-file">
		<switch>
			<case to="end">
				<!-- check for file (placeholder command, don't know what it does )-->
				${fs:exists(workingFile)} <!-- workingFile is param, should be dir of possible WORKING.TXT -->
			</case>
			<default to="check-control-file" />
		</switch>
	</decision>

	<!-- Looking for control file -->
	<!-- END iff CONTROL.TXT is NOT found -->
	<decision name="check-control-file">
		<switch>
			<case to="control-file-prep">
				${fs:exists(controlFile)}
			</case>
			<default to="check-failure-file" />
		</switch>
	</decision>

	<!-- Looking for FAILURE files-->
	<!-- END iff FAILURE files exist -->
	<decision name="check-failure-file">
		<switch>
			<case to="failure-cleanup-request">
				${fs:exists(failureFile)}
			</case>
			<default to="end" />
		</switch>
	</decision>

	<action name="failure-cleanup-request">
		<fs>
			<delete path="${customMapRawDir}" />
			<mkdir path="${customMapRawDir}" />
			<chmod path="${customMapRawDir}" permissions='777' dir-files='false' />
		</fs>
		<ok to="end" />
		<error to="end" />
	</action>

	<!-- Renames control to working, then starts process -->
	<action name="control-file-prep">
		<fs>
			<move source="${controlFile}" target="${workingFile}" />
			<chmod path="${customMapRawDir}/*" permissions="777" dir-files="false" />
		</fs>
		<ok to="retrieveControlJob"/>
		<error to="retrieveControlJob"/>
	</action>

	<!-- Calls python script to get jobIDs -->
	<action name="retrieveControlJob">
		<shell xmlns="uri:oozie:shell-action:0.1">
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<exec>/usr/bin/python</exec>
			<argument>chsSayControlJob.py</argument>
			<argument>-i</argument>
			<argument>${workingFile}</argument>
			<file>${scriptsDir}/chsSayControlJob.py#chsSayControlJob.py</file>
			<file>${scriptsDir}/chsHadoopUtils.py#chsHadoopUtils.py</file>
			<file>${scriptsDir}/simpleflake.py#simpleflake.py</file>
			<capture-output />
		</shell>
		<ok to="validate-control-payload" />
		<error to="notify-stage3-control-failed" />
	</action>

	<!-- validates the JobID retrieved by retrieveControlJob -->
	<decision name="validate-control-payload">
		<switch>
			<case to="retrieveSourcePath">
				${wf:actionData('retrieveControlJob')['returnCode'] ne 'FAILURE'}
			</case>
			<default to="notify-stage3-control-failed" />
		</switch>
	</decision>

	<action name="retrieveSourcePath">
		<shell xmlns="uri:oozie:shell-action:0.1">
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<exec>/usr/bin/bash</exec>
			<argument>extractPathFromCMControl.sh</argument>
			<argument>${controlFile}</argument>
			<file>${scriptsDir}/extractPathFromCMControl.sh#extractPathFromCMControl.sh</file>
		</shell>
		<ok to="notify-stage3-starting" />
		<error to="notify-stage3-source-failed" />
	</action>

	<action name="notify-stage3-source-failed">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraStatusPush</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>-j</arg>
			<!-- probably no jobID if we're here -->
			<arg>unknown</arg>
			<arg>-f</arg>
			<arg>0000</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>STAGE-3</arg>
			<arg>-x</arg>
			<arg>FAILED</arg>
			<arg>-m</arg>
			<arg>'${wf:id()} Stage 3 Custom Map source path extraction failed; workflow exiting...'</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="stage3-failure-cleanup" />
		<error to="stage3-failure-cleanup" />
	</action>


	<action name="notify-stage3-control-failed">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraStatusPush</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>-j</arg>
			<!-- probably no jobID if we're here -->
			<arg>unknown</arg>
			<arg>-f</arg>
			<arg>0000</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>STAGE-3</arg>
			<arg>-x</arg>
			<arg>FAILED</arg>
			<arg>-m</arg>
			<arg>'${wf:id()} Stage 3 Custom Map control checks failed; workflow exiting...'</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="stage3-failure-cleanup" />
		<error to="stage3-failure-cleanup" />
	</action>

	<action name="stage3-failure-cleanup">
		<fs>
			<delete path="${workingFile}" />
		</fs>
		<ok to="kill" />
		<error to="kill" />
	</action>



	<!-- Action to alert that Stage 3 is starting -->
	<action name="notify-stage3-starting">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraStatusPush</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>-j</arg>
			<arg>${wf:actionData('retrieveControlJob')['jobID']}</arg>
			<arg>-f</arg>
			<arg>0000</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>STAGE-3</arg>
			<arg>-x</arg>
			<arg>STARTED</arg>
			<arg>-m</arg>
			<arg>'${wf:id()} Stage 3 CustomMap workflow STARTED'</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="stage3-process-init" />
		<error to="end" />
	</action>

	<action name="stage3-process-init">
		<shell xmlns="uri:oozie:shell-action:0.1">
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<exec>/usr/bin/bash</exec>
			<argument>athena_cm_load.sh</argument>
			<argument>-i</argument>
			<argument>${wf:actionData('retrieveControlJob')['jobID']}</argument>
			<argument>${wf:actionData('retrieveSourcePath')</argument>
			<argument>${customMapFinishedDir}</argument>
			<argument>${tdServer}</argument>
			<argument>${tdUserID}</argument>
			<argument>${tdUserIDPassword}</argument>
			<!-- <argument>${tdStageDB}</argument> -->
			<argument>${tdBase}</argument>
			<file>${scriptsDir}/athena_cm_load.sh#athena_cm_load.sh</file>
			<capture-output />
		</shell>
		<ok to="validate-success" />
		<error to="notify-process-failed" />
	</action>

	<decision name="validate-success">
		<switch>
			<case to="notify-process-success">
				${wf:actionData('stage3-process-init')['returnCode'] ne 'FAILURE'}
			</case>
			<default to="notify-process-failed" />
		</switch>
	</decision>

	<action name="notify-process-failed">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraStatusPush</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>-j</arg>
			<arg>${wf:actionData('retrieveControlJob')['jobID']}</arg>
			<arg>-f</arg>
			<arg>0000</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>STAGE-3</arg>
			<arg>-x</arg>
			<arg>FAILING</arg>
			<arg>-m</arg>
			<arg>'${wf:id()} Stage 3 CustomMap failed on stage3-process-init'</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="stage3-notify-failed" />
		<error to="stage3-notify-failed" />
	</action>

	<action name="notify-process-success">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraStatusPush</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>-j</arg>
			<arg>${wf:actionData('retrieveControlJob')['jobID']}</arg>
			<arg>-f</arg>
			<arg>0000</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>STAGE-3</arg>
			<arg>-x</arg>
			<arg>WORKING</arg>
			<arg>-m</arg>
			<arg>'${wf:id()} Stage 3 CustomMap success on stage3-process-init'</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<!-- Below flow should go to custommap-process-notify-success to update
			 server -->
		<ok to="successful-process-cleanup" />
		<error to="successful-process-cleanup" />
	</action>

	<action name="custommap-process-notify-success">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraWorkQue</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword</arg>
			<arg>-j</arg>
			<arg>${wf:actionData('retrieveControlJob')['jobID']}</arg>
			<arg>-f</arg>
			<arg>${divisionID}</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>noop</arg>
			<arg>-x</arg>
			<arg>CUSTOM_MAP_COMPLETE</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="successful-process-cleanup" />
		<error to="successful-process-cleanup" />
	</action>

	<action name="successful-process-cleanup">
		<fs>
			<delete path="${workingFile}" />
		</fs>
		<ok to="end" />
		<error to="end" />
	</action>

	<action name="stage3-notify-failed">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>net.chs.datalake.teradata.TeraStatusPush</main-class>
			<arg>-h</arg>
			<arg>${tdServer}</arg>
			<arg>-d</arg>
			<arg>${tdAuditDB}</arg>
			<arg>-u</arg>
			<arg>${tdUserID}</arg>
			<arg>-p</arg>
			<arg>${tdUserIDPassword}</arg>
			<arg>-j</arg>
			<arg>${wf:actionData('retrieveControlJob')['jobID']}</arg>
			<arg>-f</arg>
			<arg>0000</arg>
			<arg>-s</arg>
			<arg>${sourceName}</arg>
			<arg>-z</arg>
			<arg>STAGE-3</arg>
			<arg>-x</arg>
			<arg>WORKING</arg>
			<arg>-m</arg>
			<arg>'${wf:id()} Stage 3 CustomMap workflow exiting...'</arg>
			<file>job.properties#job.properties</file>
			<capture-output />
		</java>
		<ok to="stage3-failure-cleanup" />
		<error to="stage3-failure-cleanup" />
	</action>

	<kill name="kill">
		<message>"An error has killed the job: ${wf:errorMessage(wf:lastErrorNode())}"</message>
	</kill>

	<end name="end" />
</workflow-app>
